import React, { useState, useEffect, useMemo, useRef } from "react";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import PayRollData from "../data/payroll_data.json";

const PAYROLL_STORAGE_KEY = "payroll_records";

const PayRoll = () => {
  const initialEmployees = PayRollData.payrollData;

  const [employees, setEmployees] = useState(() => {
    const saved = localStorage.getItem(PAYROLL_STORAGE_KEY);
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch {
        return initialEmployees;
      }
    }
    return initialEmployees;
  });

  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [hoveredBtnId, setHoveredBtnId] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editValues, setEditValues] = useState({
    hoursWorked: "",
    leaveDeductions: "",
    finalSalary: "",
  });

  const totalMonthlyPay = useMemo(() => {
    return employees.reduce((acc, emp) => acc + Number(emp.finalSalary || 0), 0);
  }, [employees]);

  useEffect(() => {
    localStorage.setItem(PAYROLL_STORAGE_KEY, JSON.stringify(employees));
    localStorage.setItem("total_payroll", JSON.stringify(totalMonthlyPay));
  }, [employees, totalMonthlyPay]);

  // Drag & drop refs & state
  const dragItemIndex = useRef(null);
  const dragOverItemIndex = useRef(null);
  const [draggingIndex, setDraggingIndex] = useState(null);
  const [dragOverIndex, setDragOverIndex] = useState(null);

  const [slideIn, setSlideIn] = useState(false);
  useEffect(() => {
    setSlideIn(true);
  }, []);

  // PDF generation function
  const downloadPayslipPDF = (emp) => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const centerX = pageWidth / 2;

    const headerColor = [155, 89, 182];
    const darkTextColor = [38, 38, 38];

    doc.setFontSize(20);
    doc.setTextColor(...headerColor);
    doc.text("Employee Payslip", centerX, 20, { align: "center" });

    doc.setFontSize(12);
    doc.setTextColor(...darkTextColor);
    const today = new Date().toLocaleDateString();
    doc.text(`Date Issued: ${today}`, margin, 30);

    doc.setFontSize(14);
    doc.setTextColor(...headerColor);
    doc.text("Employee Information", margin, 40);

    autoTable(doc, {
      startY: 45,
      head: [["Field", "Value"]],
      body: [
        ["Employee ID", emp.employeeId],
        ["Name", emp.name],
        ["Department", emp.department],
        ["Position", emp.position],
      ],
      theme: "grid",
      headStyles: { fillColor: headerColor, textColor: 255 },
      styles: {
        fontSize: 11,
        cellPadding: 3,
        textColor: darkTextColor,
        lineColor: darkTextColor,
      },
      margin: { left: margin, right: margin },
    });

    const salaryY = doc.lastAutoTable.finalY + 10;
    doc.setFontSize(14);
    doc.setTextColor(...headerColor);
    doc.text("Salary Breakdown", margin, salaryY);

    autoTable(doc, {
      startY: salaryY + 5,
      head: [["Description", "Amount"]],
      body: [
        ["Hours Worked", emp.hoursWorked],
        ["Leave Deductions", `R${emp.leaveDeductions}`],
        ["Final Salary", `R${emp.finalSalary}`],
      ],
      theme: "striped",
      headStyles: { fillColor: headerColor, textColor: 255 },
      styles: {
        fontSize: 11,
        cellPadding: 3,
        textColor: darkTextColor,
        lineColor: darkTextColor,
        fillColor: [245, 245, 245],
      },
      margin: { left: margin, right: margin },
    });

    doc.setFontSize(10);
    doc.setTextColor(...darkTextColor);
    doc.text("Generated by HR System", centerX, pageHeight - 20, { align: "center" });

    doc.save(`Employee_${emp.employeeId}_Payslip.pdf`);
  };

  // Delete employee
  const handleDelete = (employeeId) => {
    if (window.confirm("Are you sure you want to delete this employee?")) {
      setEmployees((prev) => prev.filter((emp) => emp.employeeId !== employeeId));
      if (selectedEmployee && selectedEmployee.employeeId === employeeId) {
        setSelectedEmployee(null);
        setIsEditing(false);
      }
    }
  };

  // Start editing
  const startEditing = () => {
    if (!selectedEmployee) return;
    setEditValues({
      hoursWorked: selectedEmployee.hoursWorked,
      leaveDeductions: selectedEmployee.leaveDeductions,
      finalSalary: selectedEmployee.finalSalary,
    });
    setIsEditing(true);
  };

  // Cancel editing
  const cancelEditing = () => {
    setIsEditing(false);
  };

  // Save editing
  const saveEditing = () => {
    setEmployees((prev) =>
      prev.map((emp) =>
        emp.employeeId === selectedEmployee.employeeId
          ? {
            ...emp,
            hoursWorked: Number(editValues.hoursWorked),
            leaveDeductions: Number(editValues.leaveDeductions),
            finalSalary: Number(editValues.finalSalary),
          }
          : emp
      )
    );
    setSelectedEmployee((prev) => ({
      ...prev,
      hoursWorked: Number(editValues.hoursWorked),
      leaveDeductions: Number(editValues.leaveDeductions),
      finalSalary: Number(editValues.finalSalary),
    }));
    setIsEditing(false);
  };

  // Handle input change for editing fields
  const onChangeEditValue = (e) => {
    const { name, value } = e.target;
    if (!/^\d*\.?\d*$/.test(value)) return; // allow only numbers and dot
    setEditValues((prev) => ({ ...prev, [name]: value }));
  };

  // Drag handlers with employeeId update
  const handleDragStart = (index) => {
    dragItemIndex.current = index;
    setDraggingIndex(index);
  };

  const handleDragEnter = (index) => {
    dragOverItemIndex.current = index;
    setDragOverIndex(index);
  };

  const handleDragLeave = (index) => {
    if (dragOverItemIndex.current === index) {
      dragOverItemIndex.current = null;
      setDragOverIndex(null);
    }
  };

  const handleDrop = () => {
    const fromIndex = dragItemIndex.current;
    const toIndex = dragOverItemIndex.current;

    if (
      fromIndex === null ||
      toIndex === null ||
      fromIndex === toIndex
    ) {
      setDraggingIndex(null);
      setDragOverIndex(null);
      return;
    }

    setEmployees((prev) => {
      const newList = [...prev];
      const [moved] = newList.splice(fromIndex, 1);
      newList.splice(toIndex, 0, moved);

      // Update employeeId to match new index + 1
      return newList.map((emp, idx) => ({
        ...emp,
        employeeId: idx + 1,
      }));
    });

    dragItemIndex.current = null;
    dragOverItemIndex.current = null;
    setDraggingIndex(null);
    setDragOverIndex(null);
  };

  // Styles omitted for brevity (same as your original styles)...

  // ... keep all your styles from original code here ...

  return (
    <section style={{
      width: "100%",
      minHeight: "100vh",
      color: "#393739",
      backgroundColor: "#f0f0f0",
      padding: 40,
      overflow: "hidden",
      transition: "all 0.35s ease-in-out",
      fontFamily: "'Raleway', sans-serif",
    }}>
      <h2 style={{ fontWeight: 600, marginBottom: 6 }}>PayRoll Page</h2>

      <div style={{ marginBottom: 20, fontSize: "16px", fontWeight: "bold" }}>
        ðŸ§¾ Total Monthly Payroll Cost: R{totalMonthlyPay.toLocaleString()}
      </div>

      <div
        style={{
          marginBottom: 12,
          fontWeight: "600",
          fontSize: "1rem",
          color: "#7e289e",
          fontStyle: "italic",
        }}
      >
        * Drag and drop rows to reorder employees as needed.
      </div>

      <div style={{ overflowX: "auto" }}>
        <table
          style={{
            width: "100%",
            border: "none",
            borderRadius: 40,
            borderCollapse: "separate",
            animation: slideIn ? "slide-in-right 0.5s ease forwards" : "none",
          }}
          id="payroll-table"
        >
          <thead>
            <tr>
              <th style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", backgroundColor: "#262626", color: "#fff" }}>Employee ID</th>
              <th style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", backgroundColor: "#262626", color: "#fff" }}>Name</th>
              <th style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", backgroundColor: "#262626", color: "#fff" }}>Department</th>
              <th style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", backgroundColor: "#262626", color: "#fff" }}>Position</th>
              <th style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", backgroundColor: "#262626", color: "#fff" }}>Hours Worked</th>
              <th style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", backgroundColor: "#262626", color: "#fff" }}>Leave Deductions</th>
              <th style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", backgroundColor: "#262626", color: "#fff" }}>Final Salary</th>
              <th style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", backgroundColor: "#262626", color: "#fff" }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {employees.map((emp, index) => {
              const isDragging = index === draggingIndex;
              const isDragOver = index === dragOverIndex && draggingIndex !== index;

              return (
                <tr
                  key={emp.employeeId}
                  draggable
                  onDragStart={() => handleDragStart(index)}
                  onDragEnter={() => handleDragEnter(index)}
                  onDragOver={(e) => e.preventDefault()}
                  onDragLeave={() => handleDragLeave(index)}
                  onDrop={handleDrop}
                  style={{
                    cursor: "grab",
                    backgroundColor: isDragging
                      ? "#e0d7f7"
                      : isDragOver
                        ? "#c8b9e8"
                        : "transparent",
                    opacity: isDragging ? 0.7 : 1,
                  }}
                >
                  <td style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", fontWeight: 500, verticalAlign: "middle" }}>
                    {emp.employeeId}
                  </td>
                  <td style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", fontWeight: 500, verticalAlign: "middle" }}>
                    {emp.name}
                  </td>
                  <td style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", fontWeight: 500, verticalAlign: "middle" }}>
                    {emp.department}
                  </td>
                  <td style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", fontWeight: 500, verticalAlign: "middle" }}>
                    {emp.position}
                  </td>
                  <td style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", fontWeight: 500, verticalAlign: "middle" }}>
                    {emp.hoursWorked}
                  </td>
                  <td style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", fontWeight: 500, verticalAlign: "middle" }}>
                    R{emp.leaveDeductions}
                  </td>
                  <td style={{ border: "1px solid #ddd", padding: 8, textAlign: "left", fontWeight: 500, verticalAlign: "middle" }}>
                    R{emp.finalSalary}
                  </td>
                  <td
                    style={{
                      border: "1px solid #ddd",
                      padding: 8,
                      textAlign: "left",
                      fontWeight: 500,
                      verticalAlign: "middle",
                      display: "flex",
                      gap: "10px",
                      alignItems: "center",
                    }}
                  >
                    <button
                      style={
                        hoveredBtnId === emp.employeeId
                          ? {
                            border: "none",
                            color: "#fff",
                            fontWeight: 600,
                            fontSize: "0.9rem",
                            backgroundImage: "linear-gradient(#a750c4 , #9b59b6)",
                            borderRadius: 19,
                            padding: "9px 30px",
                            cursor: "pointer",
                            transition: "all 0.3s ease",
                            marginRight: 8,
                            whiteSpace: "nowrap",
                            boxShadow: "0 2px 5px rgba(155, 89, 182, 0.8)",
                            transform: "scale(1.01)",
                          }
                          : {
                            border: "none",
                            color: "#fff",
                            fontWeight: 600,
                            fontSize: "0.9rem",
                            backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                            borderRadius: 19,
                            padding: "9px 30px",
                            cursor: "pointer",
                            transition: "all 0.3s ease",
                            marginRight: 8,
                            whiteSpace: "nowrap",
                          }
                      }
                      onMouseEnter={() => setHoveredBtnId(emp.employeeId)}
                      onMouseLeave={() => setHoveredBtnId(null)}
                      onClick={() => {
                        setSelectedEmployee(emp);
                        setIsEditing(false);
                      }}
                    >
                      View Payslip
                    </button>

                    <button
                      style={
                        hoveredBtnId === `del-${emp.employeeId}`
                          ? {
                            border: "none",
                            color: "#fff",
                            fontWeight: 600,
                            fontSize: "0.9rem",
                            backgroundImage: "linear-gradient(#a750c4 , #9b59b6)",
                            borderRadius: 19,
                            padding: "9px 30px",
                            cursor: "pointer",
                            transition: "all 0.3s ease",
                            marginRight: 8,
                            whiteSpace: "nowrap",
                            boxShadow: "0 2px 5px rgba(155, 89, 182, 0.8)",
                            transform: "scale(1.01)",
                          }
                          : {
                            border: "none",
                            color: "#fff",
                            fontWeight: 600,
                            fontSize: "0.9rem",
                            backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                            borderRadius: 19,
                            padding: "9px 30px",
                            cursor: "pointer",
                            transition: "all 0.3s ease",
                            marginRight: 8,
                            whiteSpace: "nowrap",
                          }
                      }
                      onMouseEnter={() => setHoveredBtnId(`del-${emp.employeeId}`)}
                      onMouseLeave={() => setHoveredBtnId(null)}
                      onClick={() => handleDelete(emp.employeeId)}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* Modal */}
      {selectedEmployee && (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            width: "100vw",
            height: "100vh",
            background: "rgba(0,0,0,0.5)",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            zIndex: 1000,
          }}
          onClick={() => {
            setSelectedEmployee(null);
            setIsEditing(false);
          }}
          role="dialog"
          aria-modal="true"
        >
          <div
            style={{
              background: "#fff",
              padding: 20,
              borderRadius: 8,
              minWidth: 300,
              maxWidth: 400,
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <h2 style={{ marginBottom: 16 }}>Payslip Preview</h2>
            <p>
              <strong>Employee ID:</strong> {selectedEmployee.employeeId}
            </p>
            <p>
              <strong>Name:</strong> {selectedEmployee.name}
            </p>
            <p>
              <strong>Department:</strong> {selectedEmployee.department}
            </p>
            <p>
              <strong>Position:</strong> {selectedEmployee.position}
            </p>

            <p>
              <strong>Hours Worked: </strong>
              {isEditing ? (
                <input
                  type="text"
                  name="hoursWorked"
                  value={editValues.hoursWorked}
                  onChange={onChangeEditValue}
                  style={{ width: "100px", padding: "3px", fontSize: "1rem" }}
                />
              ) : (
                selectedEmployee.hoursWorked
              )}
            </p>

            <p>
              <strong>Leave Deductions: </strong>
              {isEditing ? (
                <input
                  type="text"
                  name="leaveDeductions"
                  value={editValues.leaveDeductions}
                  onChange={onChangeEditValue}
                  style={{ width: "100px", padding: "3px", fontSize: "1rem" }}
                />
              ) : (
                `R${selectedEmployee.leaveDeductions}`
              )}
            </p>

            <p>
              <strong>Final Salary: </strong>
              {isEditing ? (
                <input
                  type="text"
                  name="finalSalary"
                  value={editValues.finalSalary}
                  onChange={onChangeEditValue}
                  style={{ width: "100px", padding: "3px", fontSize: "1rem" }}
                />
              ) : (
                `R${selectedEmployee.finalSalary}`
              )}
            </p>

            {!isEditing ? (
              <>
                <button
                  style={{
                    border: "none",
                    color: "#fff",
                    fontWeight: 600,
                    fontSize: "0.9rem",
                    backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                    borderRadius: 19,
                    padding: "9px 30px",
                    cursor: "pointer",
                    transition: "all 0.3s ease",
                    marginTop: 10,
                    width: "100%",
                  }}
                  onClick={() => downloadPayslipPDF(selectedEmployee)}
                  onMouseEnter={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#a750c4 , #9b59b6)",
                      boxShadow: "0 2px 5px rgba(155, 89, 182, 0.8)",
                      transform: "scale(1.01)",
                      color: "#fff",
                    })
                  }
                  onMouseLeave={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                      color: "#fff",
                      boxShadow: "none",
                      transform: "none",
                    })
                  }
                >
                  Download PDF
                </button>

                <button
                  style={{
                    border: "none",
                    color: "#fff",
                    fontWeight: 600,
                    fontSize: "0.9rem",
                    backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                    borderRadius: 19,
                    padding: "9px 30px",
                    cursor: "pointer",
                    transition: "all 0.3s ease",
                    marginTop: 10,
                    width: "100%",
                  }}
                  onClick={startEditing}
                  onMouseEnter={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#a750c4 , #9b59b6)",
                      boxShadow: "0 2px 5px rgba(155, 89, 182, 0.8)",
                      transform: "scale(1.01)",
                      color: "#fff",
                    })
                  }
                  onMouseLeave={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                      color: "#fff",
                      boxShadow: "none",
                      transform: "none",
                    })
                  }
                >
                  Edit
                </button>

                <button
                  style={{
                    border: "none",
                    color: "#fff",
                    fontWeight: 600,
                    fontSize: "0.9rem",
                    backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                    borderRadius: 19,
                    padding: "9px 30px",
                    cursor: "pointer",
                    transition: "all 0.3s ease",
                    marginTop: 10,
                    width: "100%",
                  }}
                  onClick={() => setSelectedEmployee(null)}
                  onMouseEnter={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#a750c4 , #9b59b6)",
                      boxShadow: "0 2px 5px rgba(155, 89, 182, 0.8)",
                      transform: "scale(1.01)",
                      color: "#fff",
                    })
                  }
                  onMouseLeave={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                      color: "#fff",
                      boxShadow: "none",
                      transform: "none",
                    })
                  }
                >
                  Close
                </button>
              </>
            ) : (
              <>
                <button
                  style={{
                    border: "none",
                    color: "#fff",
                    fontWeight: 600,
                    fontSize: "0.9rem",
                    backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                    borderRadius: 19,
                    padding: "9px 30px",
                    cursor: "pointer",
                    transition: "all 0.3s ease",
                    marginTop: 10,
                    width: "100%",
                  }}
                  onClick={saveEditing}
                  onMouseEnter={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#a750c4 , #9b59b6)",
                      boxShadow: "0 2px 5px rgba(155, 89, 182, 0.8)",
                      transform: "scale(1.01)",
                      color: "#fff",
                    })
                  }
                  onMouseLeave={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                      color: "#fff",
                      boxShadow: "none",
                      transform: "none",
                    })
                  }
                >
                  Save
                </button>

                <button
                  style={{
                    border: "none",
                    color: "#fff",
                    fontWeight: 600,
                    fontSize: "0.9rem",
                    backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                    borderRadius: 19,
                    padding: "9px 30px",
                    cursor: "pointer",
                    transition: "all 0.3s ease",
                    marginTop: 10,
                    width: "100%",
                  }}
                  onClick={cancelEditing}
                  onMouseEnter={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#a750c4 , #9b59b6)",
                      boxShadow: "0 2px 5px rgba(155, 89, 182, 0.8)",
                      transform: "scale(1.01)",
                      color: "#fff",
                    })
                  }
                  onMouseLeave={(e) =>
                    Object.assign(e.target.style, {
                      backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
                      color: "#fff",
                      boxShadow: "none",
                      transform: "none",
                    })
                  }
                >
                  Cancel
                </button>
              </>
            )}
          </div>
        </div>
      )}
    </section>
  );
};

export default PayRoll;
